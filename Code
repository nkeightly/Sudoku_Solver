import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class SudokuSolverGUI extends JFrame {

    private static final int GRID_SIZE = 9;
    private static final int BOX_SIZE = 3;
    private static final int EMPTY = 0;
    private static final String FILENAME = "sudoku.txt";

    private SudokuSolver solver;
    private JTextField[][] gridUI;

    public SudokuSolverGUI() {
        solver = new SudokuSolver(readInputFile(FILENAME));
        gridUI = new JTextField[GRID_SIZE][GRID_SIZE];

        // Create the grid UI
        JPanel gridPanel = new JPanel(new GridLayout(GRID_SIZE, GRID_SIZE));
        Font font = new Font("SansSerif", Font.BOLD, 20);
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0; j < GRID_SIZE; j++) {
                JTextField textField = new JTextField();
                textField.setFont(font);
                textField.setHorizontalAlignment(JTextField.CENTER);
                if (solver.getGrid()[i][j] != EMPTY) {
                    textField.setText(Integer.toString(solver.getGrid()[i][j]));
                    textField.setEditable(false);
                }
                gridPanel.add(textField);
                gridUI[i][j] = textField;
            }
        }

        // Create the Solve button
        JButton solveButton = new JButton("Solve");
        solveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (solver.solve()) {
                    updateGridUI();
                    JOptionPane.showMessageDialog(SudokuSolverGUI.this, "Solution found!");
                } else {
                    JOptionPane.showMessageDialog(SudokuSolverGUI.this, "No solution found.");
                }
            }
        });

        // Add the components to the frame
        add(gridPanel, BorderLayout.CENTER);
        add(solveButton, BorderLayout.SOUTH);

        setTitle("Sudoku Solver");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private int[][] readInputFile(String filename) {
        int[][] initialGrid = new int[GRID_SIZE][GRID_SIZE];
        try {
            Scanner scanner = new Scanner(new File(filename));
            for (int i = 0; i < GRID_SIZE; i++) {
                for (int j = 0; j < GRID_SIZE; j++) {
                    initialGrid[i][j] = scanner.nextInt();
                }
            }
            scanner.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        return initialGrid;
    }

    private void updateGridUI() {
        for (int i = 0; i < GRID_SIZE; i++) {
            for (int j = 0
    }
}
